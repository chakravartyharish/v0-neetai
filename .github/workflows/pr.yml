name: 🔄 Pull Request CI

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel in-progress workflows on new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  NODE_ENV: test

jobs:
  # Job to detect which packages/apps changed
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      apps: ${{ steps.changes.outputs.apps }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          # Check if any relevant files changed
          if echo "$CHANGED_FILES" | grep -E '\.(ts|tsx|js|jsx|json|md)$|package\.json|turbo\.json' > /dev/null; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Detect package changes
          PACKAGES_CHANGED=$(echo "$CHANGED_FILES" | grep '^packages/' | cut -d'/' -f2 | sort | uniq | tr '\n' ',' | sed 's/,$//')
          echo "packages=$PACKAGES_CHANGED" >> $GITHUB_OUTPUT
          
          # Detect app changes
          APPS_CHANGED=$(echo "$CHANGED_FILES" | grep '^apps/' | cut -d'/' -f2 | sort | uniq | tr '\n' ',' | sed 's/,$//')
          echo "apps=$APPS_CHANGED" >> $GITHUB_OUTPUT

  # Lint and format checks
  code-quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Check TypeScript types
        run: npm run check-types
        continue-on-error: false

      - name: Check code formatting
        run: |
          npm run format
          if [ -n "$(git status --porcelain)" ]; then
            echo "❌ Code formatting issues detected!"
            echo "Please run 'npm run format' and commit the changes."
            git diff
            exit 1
          fi
          echo "✅ Code formatting is correct!"

  # Build and test
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-build-

      - name: Build all packages and apps
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run tests (if available)
        run: |
          if npm run test --if-present; then
            echo "✅ Tests passed"
          else
            echo "ℹ️ No tests configured"
          fi

  # Package size analysis
  bundle-analysis:
    name: 📦 Bundle Analysis
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-changes == 'true' && contains(needs.changes.outputs.apps, 'web')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build for bundle analysis
        run: npm run build
        env:
          NODE_ENV: production

      - name: Analyze bundle size
        run: |
          echo "## 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d "apps/web/.next" ]; then
            npx next-bundle-analyzer apps/web/.next >> bundle-analysis.txt 2>&1 || echo "Bundle analysis completed"
            if [ -f bundle-analysis.txt ]; then
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat bundle-analysis.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No Next.js build found for analysis" >> $GITHUB_STEP_SUMMARY
          fi

  # Security audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.has-changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Run security audit
        run: |
          echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run npm audit
          if npm audit --audit-level=moderate; then
            echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "Please run 'npm audit fix' to resolve them" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Summary job
  pr-check-summary:
    name: ✅ PR Check Summary
    runs-on: ubuntu-latest
    needs: [changes, code-quality, build-and-test, bundle-analysis, security-audit]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "## 🎯 PR Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.changes.result }}" == "success" ]]; then
            echo "✅ Change detection: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Change detection: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "✅ Code quality: All checks passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.code-quality.result }}" == "skipped" ]]; then
            echo "⏭️ Code quality: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code quality: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "✅ Build & Test: Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-and-test.result }}" == "skipped" ]]; then
            echo "⏭️ Build & Test: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build & Test: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "✅ Security audit: No vulnerabilities" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.security-audit.result }}" == "skipped" ]]; then
            echo "⏭️ Security audit: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security audit: Vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail if any required job failed
          if [[ "${{ needs.code-quality.result }}" == "failure" ]] || \
             [[ "${{ needs.build-and-test.result }}" == "failure" ]] || \
             [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **PR checks failed!** Please fix the issues above before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **All PR checks passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY